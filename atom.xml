<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新力量=新科技</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fuyk.github.io/"/>
  <updated>2017-09-01T07:18:37.449Z</updated>
  <id>http://fuyk.github.io/</id>
  
  <author>
    <name>FUYK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM垃圾回收算法及回收器</title>
    <link href="http://fuyk.github.io/2017/09/01/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E5%8F%8A%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
    <id>http://fuyk.github.io/2017/09/01/JVM垃圾回收算法及回收器/</id>
    <published>2017-09-01T07:16:11.000Z</published>
    <updated>2017-09-01T07:18:37.449Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲述JVM中几种常见的垃圾回收算法和相关的垃圾回收器，以及常见的和GC相关的性能调优参数。</p>
<p>GC Roots</p>
<p>我们先来了解一下在Java中是如何判断一个对象的生死的，有些语言比如Python是采用引用计数来统计的，但是这种做法可能会遇见循环引用的问题，在Java以及C#等语言中是采用GC Roots来解决这个问题。如果一个对象和GC Roots之间没有链接，那么这个对象也可以被视作是一个可回收的对象。</p>
<p>Java中可以被作为GC Roots中的对象有：</p>
<p>虚拟机栈中的引用的对象。<br>方法区中的类静态属性引用的对象。<br>方法区中的常量引用的对象。<br>本地方法栈（jni）即一般说的Native的引用对象。</p>
<p>垃圾回收算法</p>
<p>标记清除</p>
<p>标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。在标记阶段首先通过根节点，标记所有从根节点开始的对象，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象。标记清除算法带来的一个问题是会存在大量的空间碎片，因为回收后的空间是不连续的，这样给大对象分配内存的时候可能会提前触发full gc。</p>
<p>复制算法</p>
<p>将现有的内存空间分为两快，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p>
<p>现在的商业虚拟机都采用这种收集算法来回收新生代，IBM研究表明新生代中的对象98%是朝夕生死的，所以并不需要按照1:1的比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地拷贝到另外一个Survivor空间上，最后清理掉Eden和刚才用过的Survivor的空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1(可以通过-SurvivorRattio来配置)，也就是每次新生代中可用内存空间为整个新生代容量的90%，只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保。</p>
<p>标记整理</p>
<p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活的对象较多，复制的成本也将很高。<br>标记-压缩算法是一种老年代的回收算法，它在标记-清除算法的基础上做了一些优化。首先也需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。</p>
<p>增量算法</p>
<p>增量算法的基本思想是，如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>
<p>垃圾回收器</p>
<p>Serial收集器</p>
<p>Serial收集器是最古老的收集器，它的缺点是当Serial收集器想进行垃圾回收的时候，必须暂停用户的所有进程，即stop the world。到现在为止，它依然是虚拟机运行在client模式下的默认新生代收集器，与其他收集器相比，对于限定在单个CPU的运行环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾回收自然可以获得最高的单线程收集效率。</p>
<p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用”标记－整理“算法。这个收集器的主要意义也是被Client模式下的虚拟机使用。在Server模式下，它主要还有两大用途：一个是在JDK1.5及以前的版本中与Parallel Scanvenge收集器搭配使用，另外一个就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure的时候使用。</p>
<p>通过指定-UseSerialGC参数，使用Serial + Serial Old的串行收集器组合进行内存回收。</p>
<p>ParNew收集器</p>
<p>ParNew收集器是Serial收集器新生代的多线程实现，注意在进行垃圾回收的时候依然会stop the world，只是相比较Serial收集器而言它会运行多条进程进行垃圾回收。</p>
<p>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百的保证能超越Serial收集器。当然，随着可以使用的CPU的数量增加，它对于GC时系统资源的利用还是很有好处的。它默认开启的收集线程数与CPU的数量相同，在CPU非常多（譬如32个，现在CPU动辄4核加超线程，服务器超过32个逻辑CPU的情况越来越多了）的环境下，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。</p>
<p>-UseParNewGC: 打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收，这样新生代使用并行收集器，老年代使用串行收集器。</p>
<p>Parallel Scavenge收集器</p>
<p>Parallel是采用复制算法的多线程新生代垃圾回收器，似乎和ParNew收集器有很多的相似的地方。但是Parallel Scanvenge收集器的一个特点是它所关注的目标是吞吐量(Throughput)。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)。停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能够提升用户的体验；而高吞吐量则可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p>
<p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，采用多线程和”标记－整理”算法。这个收集器是在jdk1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是如果新生代Parallel Scavenge收集器，那么老年代除了Serial Old(PS MarkSweep)收集器外别无选择。由于单线程的老年代Serial Old收集器在服务端应用性能上的”拖累“，即使使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，又因为老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合”给力“。直到Parallel Old收集器出现后，”吞吐量优先“收集器终于有了比较名副其实的应用祝贺，在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</p>
<p>-UseParallelGC: 虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old的收集器组合进行内存回收。-UseParallelOldGC: 打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行垃圾回收</p>
<p>CMS收集器</p>
<p>CMS(Concurrent Mark Swep)收集器是一个比较重要的回收器，现在应用非常广泛，我们重点来看一下，CMS一种获取最短回收停顿时间为目标的收集器，这使得它很适合用于和用户交互的业务。从名字(Mark Swep)就可以看出，CMS收集器是基于标记清除算法实现的。它的收集过程分为四个步骤：</p>
<p>初始标记(initial mark)<br>并发标记(concurrent mark)<br>重新标记(remark)<br>并发清除(concurrent sweep)</p>
<p>注意初始标记和重新标记还是会stop the world，但是在耗费时间更长的并发标记和并发清除两个阶段都可以和用户进程同时工作。</p>
<p>不过由于CMS收集器是基于标记清除算法实现的，会导致有大量的空间碎片产生，在为大对象分配内存的时候，往往会出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前开启一次Full GC。为了解决这个问题，CMS收集器默认提供了一个-XX:+UseCMSCompactAtFullCollection收集开关参数（默认就是开启的)，用于在CMS收集器进行FullGC完开启内存碎片的合并整理过程，内存整理的过程是无法并发的，这样内存碎片问题倒是没有了，不过停顿时间不得不变长。虚拟机设计者还提供了另外一个参数-XX:CMSFullGCsBeforeCompaction参数用于设置执行多少次不压缩的FULL GC后跟着来一次带压缩的（默认值为0，表示每次进入Full GC时都进行碎片整理）。</p>
<p>不幸的是，它作为老年代的收集器，却无法与jdk1.4中已经存在的新生代收集器Parallel Scavenge配合工作，所以在jdk1.5中使用cms来收集老年代的时候，新生代只能选择ParNew或Serial收集器中的一个。ParNew收集器是使用-XX:+UseConcMarkSweepGC选项启用CMS收集器之后的默认新生代收集器，也可以使用-XX:+UseParNewGC选项来强制指定它。</p>
<p>由于CMS收集器现在比较常用，下面我们再额外了解一下CMS算法的几个常用参数：</p>
<p>UseCMSInitatingOccupancyOnly：表示只在到达阈值的时候，才进行 CMS 回收。<br>为了减少第二次暂停的时间，通过-XX:+CMSParallelRemarkEnabled开启并行remark。如果ramark时间还是过长的话，可以开启-XX:+CMSScavengeBeforeRemark选项，强制remark之前开启一次minor gc，减少remark的暂停时间，但是在remark之后也立即开始一次minor gc。<br>CMS默认启动的回收线程数目是(ParallelGCThreads + 3)/4，如果你需要明确设定，可以通过-XX:+ParallelCMSThreads来设定，其中-XX:+ParallelGCThreads代表的年轻代的并发收集线程数目。<br>CMSClassUnloadingEnabled： 允许对类元数据进行回收。<br>CMSInitatingPermOccupancyFraction：当永久区占用率达到这一百分比后，启动 CMS 回收 (前提是-XX:+CMSClassUnloadingEnabled 激活了)。<br>CMSIncrementalMode：使用增量模式，比较适合单 CPU。<br>UseCMSCompactAtFullCollection参数可以使 CMS 在垃圾收集完成后，进行一次内存碎片整理。内存碎片的整理并不是并发进行的。<br>UseFullGCsBeforeCompaction：设定进行多少次 CMS 垃圾回收后，进行一次内存压缩。</p>
<p>一些建议</p>
<p>对于Native Memory:</p>
<p>使用了NIO或者NIO框架（Mina/Netty）<br>使用了DirectByteBuffer分配字节缓冲区<br>使用了MappedByteBuffer做内存映射</p>
<p>由于Native Memory只能通过FullGC回收，所以除非你非常清楚这时真的有必要，否则不要轻易调用System.gc()。</p>
<p>另外为了防止某些框架中的System.gc调用（例如NIO框架、Java RMI），建议在启动参数中加上-XX:+DisableExplicitGC来禁用显式GC。这个参数有个巨大的坑，如果你禁用了System.gc()，那么上面的3种场景下的内存就无法回收，可能造成OOM，如果你使用了CMS GC，那么可以用这个参数替代：-XX:+ExplicitGCInvokesConcurrent。</p>
<p>此外除了CMS的GC，其实其他针对old gen的回收器都会在对old gen回收的同时回收young gen。</p>
<p>G1收集器</p>
<p>G1收集器是一款面向服务端应用的垃圾收集器。HotSpot团队赋予它的使命是在未来替换掉JDK1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点：</p>
<p>并行与并发：G1能更充分的利用CPU，多核环境下的硬件优势来缩短stop the world的停顿时间。<br>分代收集：和其他收集器一样，分代的概念在G1中依然存在，不过G1不需要其他的垃圾回收器的配合就可以独自管理整个GC堆。<br>空间整合：G1收集器有利于程序长时间运行，分配大对象时不会无法得到连续的空间而提前触发一次GC。<br>可预测的非停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>
<p>在使用G1收集器时，Java堆的内存布局和其他收集器有很大的差别，它将这个Java堆分为多个大小相等的独立区域，虽然还保留新生代和老年代的概念，但是新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>
<p>虽然G1看起来有很多优点，实际上CMS还是主流。</p>
<p>与GC相关的常用参数</p>
<p>除了上面提及的一些参数，下面补充一些和GC相关的常用参数：</p>
<p>-Xmx: 设置堆内存的最大值。<br>-Xms: 设置堆内存的初始值。<br>-Xmn: 设置新生代的大小。<br>-Xss: 设置栈的大小。<br>-PretenureSizeThreshold: 直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配。<br>-MaxTenuringThrehold: 晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就会加1，当超过这个参数值时就进入老年代。<br>-UseAdaptiveSizePolicy: 在这种模式下，新生代的大小、eden 和 survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。在手工调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量 (GCTimeRatio) 和停顿时间 (MaxGCPauseMills)，让虚拟机自己完成调优工作。<br>-SurvivorRattio: 新生代Eden区域与Survivor区域的容量比值，默认为8，代表Eden: Suvivor= 8: 1。<br>-XX:ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的。<br>-XX:MaxGCPauseMills：设置最大垃圾收集停顿时间。它的值是一个大于 0 的整数。收集器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在 MaxGCPauseMills 以内。<br>-XX:GCTimeRatio:设置吞吐量大小，它的值是一个 0-100 之间的整数。假设 GCTimeRatio 的值为 n，那么系统将花费不超过 1/(1+n) 的时间用于垃圾收集。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲述JVM中几种常见的垃圾回收算法和相关的垃圾回收器，以及常见的和GC相关的性能调优参数。&lt;/p&gt;
&lt;p&gt;GC Roots&lt;/p&gt;
&lt;p&gt;我们先来了解一下在Java中是如何判断一个对象的生死的，有些语言比如Python是采用引用计数来统计的，但是这种做法可能会遇见循
    
    </summary>
    
      <category term="jvm" scheme="http://fuyk.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="http://fuyk.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>时间观念</title>
    <link href="http://fuyk.github.io/2017/08/26/%E6%97%B6%E9%97%B4%E8%A7%82%E5%BF%B5/"/>
    <id>http://fuyk.github.io/2017/08/26/时间观念/</id>
    <published>2017-08-26T13:02:10.000Z</published>
    <updated>2017-08-26T13:50:42.249Z</updated>
    
    <content type="html"><![CDATA[<p>　　　　　　　　　　　　　　　　　　　时间的概念<br>因为我们不知道，<br>究竟什么对我们最重要，<br>所以，每件事都花不少时间，<br>盲目行动，浪费时间。<br>有些人看到我们每一件事都做，  <img src="/2017/08/26/时间观念/sj.jpg" alt="时间"><br>所以，他们期望我们什么都做。<br>每一件事都做让我们非常忙碌，<br>所以，我们没有时间去考虑，<br>究竟什么对我们重要。<br>怎么去规划时间，管理时间，<br>不让时间管理我们。<br>时间，在我们人生中是最珍贵的，<br>所以，我们要高效率利用它。</p>
<p>1.大家可能问时间有什么意义？<br>  我废话少说，大家想象五年后的你?然后我们把这个5年倒回来看看。</p>
<p>  What you are doing in 5 years?<br>  你可能长叹一口气，……yes?（哈哈）</p>
<p>我的回答可能是：拥有一家大数据，物联网相关的公司正在运营（这是自己的一个痴心妄想，也踏上这条路的初心，哈哈）。<br>那么第四年，公司已经成熟，有固定的客户，业务，稳定业绩。<br>第三年，公司逐步进入正轨，走上成熟，走过重重浴火，终于要变成小鸟，凤凰就不敢了。<br>第二年，公司刚刚成立不久，正是瓶颈期，为业务种种发愁。<br>第一年，公司注册，团队组建完成，公司选址等等准备完成。</p>
<p>这个只是的简单想法，只是为了举例让读者明白罢了。</p>
<p>2.个人的处理事情的原则（可以给大家参考），我分为五类</p>
<p>①重要紧急<br>②重要不紧急<br>③紧急不重要（委托授权）<br>④不重要不紧急</p>
<p>符永坤（富伊克fuyk）  著</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　　　　　　　　　　　　　　　　　　时间的概念&lt;br&gt;因为我们不知道，&lt;br&gt;究竟什么对我们最重要，&lt;br&gt;所以，每件事都花不少时间，&lt;br&gt;盲目行动，浪费时间。&lt;br&gt;有些人看到我们每一件事都做，  &lt;img src=&quot;/2017/08/26/时间观念/sj.jpg&quot; 
    
    </summary>
    
      <category term="职业知识" scheme="http://fuyk.github.io/categories/%E8%81%8C%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="职业修养" scheme="http://fuyk.github.io/tags/%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>致即将毕业的我</title>
    <link href="http://fuyk.github.io/2017/08/26/%E8%87%B4%E6%AF%95%E4%B8%9A%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://fuyk.github.io/2017/08/26/致毕业的自己/</id>
    <published>2017-08-26T08:58:19.000Z</published>
    <updated>2017-08-26T13:18:24.958Z</updated>
    
    <content type="html"><![CDATA[<p>面临毕业的自己，听师兄师姐们的侃侃而谈，自己也担忧起了自己的就业前程，毕业就是失业。所以自己也有了面临就业的临危感，俗话说祸起<br>  乃于萧蔷也。归根结底是自己的问题，我的座右铭是：世上无难事，只要肯登攀。机会是留给有准备的人，此时的我又激情澎湃了。所以埋头学习<br>了起来。拿起笔学习有关职业方面知识。</p>
<p>1.1准备职业人定位<br>    1.1.1那么什么是职业人?<br>    人力资源专家胡斌曾把人分为：“没人经营的人”，“别人经营的人”，“自我经营的人”和“经营别人的人”四种。职业人属于那个范畴相信大家已有所思<br>        既然进入企业，职业人必须按企业对员工的标准要求自己，这是职业人基本素质。</p>
<pre><code>1.2由院校人向企业人转变
    在学校时的几个特点：
      》可以与喜欢的人在一起，自己选择性。
      》可以喜形于色。
      》考试通过就OK，分数比什么都重要，而且闭卷考试（不可以其他辅助完成）。
      》事情自己做的，成绩当然归功于自己
      》喜欢做“与众不同的人”
      》自由性强
      》。。。。。。。。。。。大家可以集思广益

所以我们必须转变思想，向企业，社会转型》
    ①个人--团队导向
     在学校中，以自我为中心的模式不适合于企业，个人的成功必须与整体的成功结合才有意义。一荣俱荣，一损俱损，重个性
     转变到重标准；以个人衡量到集体衡量；独创到协作；独行到合作。

    ②情感--职业导向
      情绪化是学生显著的特征之一，职业场格格不入的，注重游戏规则，个人好恶不能左右于你。

    ③思维--行为导向
      学生学习，重在开发智力，学习知识，往往都是3思维的训练。这也是和企业有很大的不同，转变也就必不可少了。
      思维至上转变到产品至上；想到就行转到做到才行，而且要做到最好；理论家转变到实干家；注重思考，分析。

    ⑤个人资源--组织资源

1.2.1企业目标
  企业需要对客户负责，对社会负责，对投资者负责，对员工负责。

联想公司对员工要求，也是招聘人才的要求：
   1.知识，是基础。
   2.人际交往。团队合作和团队精神，现代企业非常注重。
   3.责任感。对自己所做的事情负责
   4.能力，知识不等于能力，能力取决于个人执行力等等。
   5.敬业。干一行爱一行，真正爱自己的工作，不是爱一行，干一行。企业不花钱养废人。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面临毕业的自己，听师兄师姐们的侃侃而谈，自己也担忧起了自己的就业前程，毕业就是失业。所以自己也有了面临就业的临危感，俗话说祸起&lt;br&gt;  乃于萧蔷也。归根结底是自己的问题，我的座右铭是：世上无难事，只要肯登攀。机会是留给有准备的人，此时的我又激情澎湃了。所以埋头学习&lt;br&gt;
    
    </summary>
    
      <category term="职业知识" scheme="http://fuyk.github.io/categories/%E8%81%8C%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="职业修养" scheme="http://fuyk.github.io/tags/%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux（一）</title>
    <link href="http://fuyk.github.io/2017/08/25/Linux%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://fuyk.github.io/2017/08/25/Linux（一）/</id>
    <published>2017-08-25T15:36:28.000Z</published>
    <updated>2017-08-31T13:01:52.095Z</updated>
    
    <content type="html"><![CDATA[<p>先说明本文：图片没有贴出，大家认真阅读不影响</p>
<pre><code>一 ：为什么学Linux
</code></pre><p>　　Linux的历史发展大家可以百度一些，了解了解就ok,学利用一切可以利用的资源；</p>
<p>　　1.Linux的特点：</p>
<p>　　第一： 免费开源，了解它的发展就知道为什么开源了，一款完全的免费的操作系统，都可以下载它的源码，没有什么限制。</p>
<p>　　</p>
<p>　　第二：  模块化程度高。 Linux 的 内核 设计 分成 进程 管理、 内存 管理、进程 间 通信、 虚拟 文件 系统、 网络 5 部分， 其 采用 的 模块 机制 使得 用户 可以 根据 实际</p>
<p>　　　　　  需要， 在 内核 中 插入 或 移走 模块， 这使 得 内核 可以 被 高度 的 剪裁 定制， 以 方便 在 不同 的 场景 下 使用。</p>
<p>.　　</p>
<p>　　第三： 广泛 的 硬件 支持。 得 益于 其 免费 开源 的 特点， 有 大批 程序员 不断 地 向 Linux 社区 提供 代码， 使得 Linux 有着 异常 丰富 的 设备 驱动 资源， 对 主流 硬件 　　　　　　的 支持 极好， 而且 几乎 能 运行 在 所有 流行 的 处理器 上。</p>
<p>　　</p>
<p>　　第四：  安全 稳定。 Linux 采取 了 很多 安全 技术 措施， 包括 读写 权限 控制、 带 保护 的 子系统、 审计 跟踪、 核心 授权 等， 这 为 网络 环境 中的 用户 提供 了</p>
<p>　　　　　  安全保障。 实际 上有 很多 运行 Linux 的 服务器 可以 持续 运行 长达 数年 而 无须 重 启， 依然 可以 性能 良好 地 提供 服务， 其 安全 稳定性 已经 在各 个领域 　　　　　  得到 了 广泛 的 证实。</p>
<p>　　第五： 多用户， 多任务。 多用户 是指 系统 资源 可以 同时 被 不同 的 用户 使用， 每个 用户 对 自己的 资源 有 特定 的 权限， 互不 影响。 多任务 是 现代化 计算机的 　　　　　 主要 特点， 指的 是 计算 机能 同时 运行 多个 程序， 且 程序 之间 彼此 独立， Linux 内核 负责 调度 每个 进程， 使之 平等 地 访问 处理器。 由于 CPU 处理</p>
<p>　　　　　 速度 极快， 从 用户 的 角度 来看 所有 的 进程 好像 在 并行 运行。</p>
<p>　　 第六：  良好 的 可移植性。 Linux 中 95% 以上 的 代码 都是 用 C 语言 编写 的， 由于 C 语言 是一 种 机器 无关 的 高级 语言， 是 可 移植 的， 因此 Linux 系统 也是</p>
<p>　　　　　　移植的</p>
<p>　　1.2Linux优点：　　　　　　　　</p>
<p>　　　　　　稳定、免费或者花费少</p>
<p>　　　　　　安全性高</p>
<pre><code>  　　　　多任务，多用户
   　　　  耗资源少

 　　　　由于内核小，所以它可以支持多种电子产品，如：Android手机、PDA等
</code></pre><p>　　 </p>
<p>　　　1.3安装（建议初学者可以以下）</p>
<p>　　　　　　在安装Linux系统之前，先来了解windows系统结构，windows系统一般是安装在C盘系统盘，同样Linux也有类似的系统盘（/根分区），Linux通常分区为（根分区/、swap分区），Linux系统以文件的存储方式，所有的文件都是存储在某个目录下的，类似于windows的文件夹。<br>对于文件系统的属性来说，windows文件系统类型一般是ntfs、fat32等，而Linux文件系统类型则为ext2、ext3、ext4等（文件系统：是操作系统用于明确磁盘或分区上的文件的方法和数据结构，文件系统由三部分组成：与文件管理有关软件、被管理文件以及实施文件管理所需数据结构。）<br>安装 Linux系统是每一个初学者的第一个门槛。在这个过程中间，最大的困惑莫过于给硬盘进行分区。虽然现在各种发行版本的 Linux 已经提供了友好的图形交互界面，但是很多人还是感觉无从下手。这其中的原因主要是不清楚 Linux 的分区规定。就好比如果我们了解了windows分区的规则，系统盘C、数据盘D等，就很好分区了。<br>在 Linux 中规定，每一个硬盘设备最多只能有 4个主分区（其中包含扩展分区）构成，任何一个扩展分区都要占用一个主分区号码，也就是在一个硬盘中，主分区和扩展分区一共最多是 4 个。<br>下面正式来安装Linux系统，安装系统前需要准备如下软件：<br> VMware workstation 10.0（可以百度一下）<br>CentOS 5.8 x86_i386.i或redhat（Linux官网下载）</p>
<p>说明：可能随时间更新版本可能安装有一定差异，不过换汤不换药，相信我们这些IT男的头脑这so easy。</p>
<p>　1. 3. 1 　 安装 前 的 规划</p>
<p>　　　　　可能会有读者正计划学习Linux 而苦恼于 不知道 使用 哪一个 发行 版， 其实 所有 的 发行 版 不管 是 RedHat、 CentOS 还是 Ubuntu， 其内 核 都是 来自 Linux 　　　　　内核 官 网（ www. kernel. org）， 不同 发行 版 之间 的 差别 在于 软件 管理 的 不同， 所以 不管 使用 哪一个 发行 版， 只要 理解 其 原理 之后， 各类 发行 版 　　　　　的 区别 其实 不大。 当然 对于 初学者 来说， 拥有 广泛 的 学习 资源 也是 很重 要的。 由于 RedHat 公司 进行 了 大力 商业 推广， 且 得 益于 其 成熟 的 认证 　　　　　体系， 因此 使用 RedHat 的 用户 比较 多， 同时， 它 还有 丰富 的 相关 技术 文档， 以及 活跃 的 社区， 所以 作为 入门 学习， 可以 使用 RedHat。</p>
<p>　　　　   不过年来，CentOS 发展 也 很 迅猛， 这个 发行 版 和 RedHat 几乎 完全 一样， 而且 在 某些方面 还 比 RedHat 略胜一筹， 所以 在 本书 中 后面 的 所有 内容 　　　　   中将 主要 使用 版本 为 5. 5 的 CentOS， 小部分 涉及 RedHat 的 内容 也 将 采用 5. 5 版本。 有 读者 可能 会 考虑 在 一台 计算 机上 安装 多个 操作系统， 　　　　   比如说 在 自己的 家用 计算 机上 安装 Windows 用于 娱乐 和 日常 应用 或 Windows 环境 下 的 开发 等， 另外 再 安装 Linux 系统 用于 学习。 在 这种 情况下， 　　        最简单 的 安装 方法 是 先 安装 Windows， 后 安装 Linux， 这样 开机 的 时候 就 自动 出现 操作系统 选择 条， 可以 根据 实际需要 选择 进入 不同 的 操作系统。               由于 Linux 对 系统 的 需求 并不 高， 所以 几乎 所有 计算机 都可以 安装， 但是 考虑到 入门 学习 Linux 需要 用到 图形 界面， 所以 建议 最好 不要 低于 以下</p>
<p>　　　　配置： CPU， P- 3 800MHz； 内存， 1GB； 硬盘， 40GB。</p>
<p> 　　　　　　</p>
<p>　　　　在 安装 Linux 的 过程中， 必须 要有 的 两个 分区 为 根 分区（/） 和 swap 分区（ 交换 分区）， 当然 还有 一些 其他 的 分区 可以 独立 出来， 比如说/ boot 分区、/ var 分区 等。 另外， 这里 介绍 几个 概念， 便于 大家 理解 后面 即将 出现 的 一些 专业 词汇。 什么 是 交换 分区？ 交换 分区 是一 个 特殊 的 分区， 它的 作用 相当于 Windows 下 的 虚拟 内存， 这个 分区 的 大小 一般 设置 为 物理 内存 的 两倍， 但是 不管 物理 内存 有 多大， 交换 分区 建议 不要 超过 8GB， 因为 大于 8GB 的 交换 分区 其实 并没有 多大 实际意义。 什么 是 Grub？ Grub 是一 个 系统 引导 工具， 通过 它可 以 加载 内核， 从而</p>
<p>在 安装 Linux 的 过程中， 必须 要有 的 两个 分区 为 根 分区（/） 和 swap 分区（ 交换 分区）， 当然 还有 一些 其他 的 分区 可以 独立 出来， 比如说/ boot 分区、/ var 分区 等。 另外， 这里 介绍 几个 概念， 便于 大家 理解 后面 即将 出现 的 一些 专业 词汇。 什么 是 交换 分区？ 交换 分区 是一 个 特殊 的 分区， 它的 作用 相当于 Windows 下 的 虚拟 内存， 这个 分区 的 大小 一般 设置 为 物理 内存 的 两倍， 但是 不管 物理 内存 有 多大， 交换 分区 建议 不要 超过 8GB， 因为 大于 8GB 的 交换 分区 其实 并没有 多大 实际意义。 什么 是 Grub？ Grub 是一 个 系统 引导 工具， 通过 它可 以 加载 内核， 从而</p>
<p>引导 系统 启动。</p>
<p>　　什么 是/ boot 分区？/ boot 分区 用于 放置 Linux 启动 所 用到 的 文件， 如 kernel 和 initrd 文件。 什么 是 DHCP？ DHCP 是 Dynamic Host Configuration Protocol 的 简写， 中文 称为 动态 主机 配置 协议。 在 TCP/ IP 网络 中， 每 台 主机 都 需要 有 IP 地址 才能 与其 他 主机 通信， 在 一个 大规模 的 网络 中， 如果 由 管理员 手动 地 对 每一 台 主机 进行 IP 地址 配置 是 不现实 的。 由此 也就 产生了 DHCP 协议， 可用 它来</p>
<ol>
<li><ol>
<li>2 　 安装 RedHat</li>
</ol>
</li>
</ol>
<p>　　</p>
<p>　　本节 将 演示 安装 RedHat 系统 的 过程， 使 用到 的 版本 是 RedHat 5. 5。 大家 可以 先到 网上 下载 RedHat 5. 5 操作系统 的 ISO 文件， 然后 刻成 光盘 再 安装。 当然 不要 忘记 在 计算机 的 主 板 中 设置 从 光驱 启动， 也可以 使用 虚拟 机 软件 通过 安装 虚拟 机 的 方式 模拟 安装 过程。 计算机 从 光盘 启动 后， 首先 会 显示 如图 1- 1 所示 界面（ 注意 看 英文 提示）。 如果 想 使用 图形 界面 安装 直接 按 回车 键 即可， 或者 在 10 秒 之内 不做 任何 输入， 这样 也会 默认 进入 图形 安装 模式。 如果 想用 字符 模式 安装， 需要 输入 linux text， 然后 按 回车 键。 如果 计算机 的 内存 过小， 安装 程序 会 检测 到 因 内存 不足 而无 法 进入 图形 安装 模式， 转而 进入 字符 安装 模式。</p>
<p>安装图解如下：<br>第一步，新建虚拟机如下图：</p>
<p>第二步，选择相关选项，如下图：</p>
<p>第三步选择“稍后安装操作系统”，如下图:</p>
<p>第四步，选择客户机操作系统类型如下图：</p>
<p>第五步，设置虚拟机硬盘大小为20G，最低不能小于5G，如下图</p>
<p>第六步，虚拟机新建完成，如下图：</p>
<p>第七步，修改虚拟机内存为512M，并添加ISO镜像，如下图：</p>
<p>自此，虚拟机新建完成，接下来点击“启动此虚拟机”进行Linux系统安装，Linux系统安装图解如下：<br>第一步，进入安装界面，直接按Enter回车键即可。</p>
<p>第二步，光盘检测，选择SKIP跳过。</p>
<p>第三步，选择安装过程中的语言，初学者可以选择“简体中文”。</p>
<p>第四步，选择初始化整个硬盘，清除所有数据。</p>
<p>第五步，选择分区方式为“自定义分区“。</p>
<p>点击“新建“-首先创建一个swap交换分区，大小为物理内存的2倍（1024M）。</p>
<p>第六步，继续创建分区，选择“新建“，然后创建根分区/，如下图选择，大小为剩余所有空间即可。</p>
<p>第七步，默认点击下一步，同时默认DHCP配置，时钟选择上海，去掉UTC勾，点击下一步。</p>
<p>第八步，设置root密码，至少六位，点击下一步。</p>
<p>第九步，系统安装包选择，这里选择“现在定制“。</p>
<p>第十步，系统安装包选择，左侧选择“开发“—-右侧选择”开发工具“和“开发库”，语言选择“支持中文“，其他一概不选择。</p>
<p>安装完毕会提示“reboot“，直接回车即可。</p>
<p>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先说明本文：图片没有贴出，大家认真阅读不影响&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一 ：为什么学Linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　Linux的历史发展大家可以百度一些，了解了解就ok,学利用一切可以利用的资源；&lt;/p&gt;
&lt;p&gt;　　1.Linux的特点：&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="linux" scheme="http://fuyk.github.io/categories/linux/"/>
    
    
      <category term="Linux" scheme="http://fuyk.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>whystudyIT</title>
    <link href="http://fuyk.github.io/2017/08/07/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B5%B0%E4%B8%8A%E8%BF%99%E8%B7%AF/"/>
    <id>http://fuyk.github.io/2017/08/07/为什么走上这路/</id>
    <published>2017-08-07T06:41:45.000Z</published>
    <updated>2017-08-07T06:52:18.097Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="关于我" scheme="http://fuyk.github.io/categories/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
    
      <category term="story" scheme="http://fuyk.github.io/tags/story/"/>
    
  </entry>
  
  <entry>
    <title>hexoStudy</title>
    <link href="http://fuyk.github.io/2017/08/05/hexoStudy/"/>
    <id>http://fuyk.github.io/2017/08/05/hexoStudy/</id>
    <published>2017-08-05T14:57:03.000Z</published>
    <updated>2017-08-25T14:39:22.634Z</updated>
    
    <content type="html"><![CDATA[<p>前提准备</p>
<p>NodeJS<br>git<br>确保安装这两个才可以继续。</p>
<p>安装Hexo<br>打开git</p>
<p>$ npm install -g hexo<br>部署Hexo<br>在任何想要放置Hexo的文件夹下建立名为Hexo的文件夹，在此文件夹中右键打开Git Bash</p>
<p>$ hexo init<br>Hexo会自动建立所有博客需要的文件</p>
<p>$ hexo g<br>$ hexo s<br>输入上面的命令就可以在本地看到初始化的博客啦，浏览器中输入localhost:4000<br>以上就完成了博客的本地调试了，下面需要将本地的博客放到github中去，利用github pages 的免费空间存放你的博客，而且别人也可以访问你的博客。</p>
<p>配置和使用github<br>首先需要注册github（废话。。划掉），然后登录github，点击右上角你的头像，再点击Settings，进入设置页面。<br>点击侧栏的SSH and GPG keys,可以查看你是否有本机的SSH密匙。如果没有，说明并没有设置SSH密匙。</p>
<p>检查SSH keys的设置<br>先不管github的网页，回到本机，打开Git Bash。输入：</p>
<p>$ cd ~/. ssh 检查本机的ssh密钥<br>如果提示：No such file or directory 说明你是第一次使用git。</p>
<p>生成新的SSH Key：<br>继续输入：</p>
<p>$ ssh-keygen -t rsa -C “邮件地址@youremail.com”<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;<br>系统会要求你输入密码，输入就好，只是这里的输入是不显示占位符的。</p>
<p>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>Enter same passphrase again:&lt;再次输入加密串&gt;<br>完成后就会提示你的密匙文件所在的位置，打开id_rsa.pub文件，复制所有，回到github网页，点击New SSH key,粘贴到key文本框中，点击add key就可以了。</p>
<p>测试SSH连接<br>输入下面的命令，git@github.com不用修改。</p>
<p>$ ssh -T git@github.com<br>会有这样的反馈：</p>
<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?<br>输入yes，就会看到：</p>
<p>Hi Dulmcat! You’ve successfully authenticated, but GitHub does not provide shell access.<br>到这里就代表已经正确的连接到github了。</p>
<p>设置用户信息<br>但还有一些个人信息还是需要继续完善下的，Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>
<p>$ git config –global user.name “cnfeat”//用户名<br>$ git config –global user.email  “cnfeat@gmail.com”//填写自己的邮箱<br>若有问题，从头再来一遍，或者到GitHub help中寻找解决方案。</p>
<p>使用GitHub pages 建立网页<br>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务。但pages服务每个ID只有一个，大小也只有300M，但作为博客站，已经足够了。</p>
<p>建立仓库<br>登录GitHub后，点击那个大大的绿色New repository按钮，新建一个仓库：<br>Repository name：dulmcat.github.io<br>Description (optional): 嗯。。括号里都说了是可选的，就随便吧，可填可不填。<br>注意！！ 这里的Repository name必须是你的github用户名.github.io，否则就不是一个github pages而只是单纯的一个仓库了。<br>点击Create Repository 完成创建。</p>
<p>上传hexo到github pages<br>上传前，需要将Hexo和github想关联起来，在Hexo的配置文件_config.yml文件中,拉到最下面，修改配置文件：</p>
<p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/Dulmcat/Dulmcat.github.io" target="_blank" rel="external">https://github.com/Dulmcat/Dulmcat.github.io</a><br>  branch: master<br>这里的repository填写的是你的github pages所在库（就是上面刚建好的那个）的地址。<br>这里有个坑，关于type的填写，有说应该是github的，有说是git的，我在两个月前的配置文件type写的github，写这篇文章时发现出错了，这才发现好像是作者在3.0之后改为了git，大家在安装Hexo时可以输入命令hexo-v查看Hexo的版本。在3.0之后需要另外安装hexo-deployer-git。</p>
<p>$ npm install hexo-deployer-git –save<br>然后</p>
<p>$ hexo d<br>这里可能会要求填写密码，填了就好。<br>然后在浏览器中输入<a href="https://dulmcat.github.io" target="_blank" rel="external">https://dulmcat.github.io</a> 就可以看到你的博客啦一个在线的博客就这样建好了当然这是我的…要输入 你的github用户名.github.io</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前提准备&lt;/p&gt;
&lt;p&gt;NodeJS&lt;br&gt;git&lt;br&gt;确保安装这两个才可以继续。&lt;/p&gt;
&lt;p&gt;安装Hexo&lt;br&gt;打开git&lt;/p&gt;
&lt;p&gt;$ npm install -g hexo&lt;br&gt;部署Hexo&lt;br&gt;在任何想要放置Hexo的文件夹下建立名为Hexo的文件夹，
    
    </summary>
    
      <category term="hexo建博小结" scheme="http://fuyk.github.io/categories/hexo%E5%BB%BA%E5%8D%9A%E5%B0%8F%E7%BB%93/"/>
    
    
      <category term="hexo" scheme="http://fuyk.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>myGitOneDay</title>
    <link href="http://fuyk.github.io/2017/08/04/myGitOneDay/"/>
    <id>http://fuyk.github.io/2017/08/04/myGitOneDay/</id>
    <published>2017-08-04T13:58:50.000Z</published>
    <updated>2017-08-05T09:12:18.488Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="学习" scheme="http://fuyk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://fuyk.github.io/2016/08/25/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fuyk.github.io/2016/08/25/代理模式/</id>
    <published>2016-08-25T15:00:24.000Z</published>
    <updated>2017-08-25T15:04:26.976Z</updated>
    
    <content type="html"><![CDATA[<p>说说 JAVA 代理模式</p>
<p> 本文内容借阅来自ImportNew中</p>
<p>事例</p>
<p>小张是一个普普通通的码农，每天勤勤恳恳地码代码。某天中午小张刚要去吃饭，一个电话打到了他的手机上。“是XX公司的小张吗？我是YY公司的王AA”。“哦，是王总啊，有什么事情吗？”。沟通过后，小张弄明白了,原来客户有个需求，刚好负责这方面开发的是小张，客户就直接找到了他。不过小张却没有答应客户的请求，而是让客户找产品经理小李沟通。</p>
<p>是小张着急去吃面而甩锅吗？并不是，只是为了使故事可以套到代理模式上。我们先看一下代理模式的定义： * 为其他对象提供一种代理，以控制对这个对象的访问。(Provide a surrogate or placeholder for another object to control access to it)</p>
<p>对照定义，码农小张可以映射为其他对象，产品经理小李为小张的代理。我们通过JAVA代码，表述上面事例。</p>
<p>静态代理</p>
<p>1.抽象角色</p>
<p>基于面向对象的思想，首先定义一个码农接口,它有一个实现用户需求的方法。</p>
<p>public interface ICoder {</p>
<pre><code>public void implDemands(String demandName);
</code></pre><p>}</p>
<p>2.真实角色</p>
<p>我们假设小张是JAVA程序员，定义一个JAVA码农类，他通过JAA语言实现需求。</p>
<p>public class JavaCoder implements ICoder{</p>
<pre><code>private String name;



public JavaCoder(String name){

    this.name = name;

}



@Override

public void implDemands(String demandName) {

    System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);

}
</code></pre><p>}</p>
<p>3.代理角色</p>
<p>委屈一下产品经理，将其命名为码农代理类，同时让他实现ICoder接口。</p>
<p>public class CoderProxy implements ICoder{</p>
<pre><code>private ICoder coder;



public CoderProxy(ICoder coder){

    this.coder = coder;

}



@Override

public void implDemands(String demandName) {

    coder.implDemands(demandName);

}
</code></pre><p>}</p>
<p>上面一个接口，两个类，就实现了代理模式。Are you kidding me？这么简单？是的，就是这么简单。 我们通过一个场景类，模拟用户找产品经理增加需求。</p>
<p>public class Customer {</p>
<pre><code>public static void main(String args[]){

    //定义一个java码农

    ICoder coder = new JavaCoder(&quot;Zhang&quot;);

    //定义一个产品经理

    ICoder proxy = new CoderProxy(coder);

    //让产品经理实现一个需求

    proxy.implDemands();

}
</code></pre><p>}</p>
<p>运行程序，结果如下：</p>
<p>Zhang implemented demand:Add user manageMent in JAVA!</p>
<p>产品经理充当了程序员的代理，客户把需求告诉产品经理，并不需要和程序员接触。看到这里，有些机智的程序员发现了问题。你看，产品经理就把客户的需求转达了一下，怪不得我看产品经理这么不爽。</p>
<p>产品经理当然不只是转达用户需求，他还有很多事情可以做。比如，该项目决定不接受新增功能的需求了，对修CoderProxy类做一些修改：</p>
<p>public class CoderProxy implements ICoder{</p>
<pre><code>private ICoder coder;



public CoderProxy(ICoder coder){

    this.coder = coder;

}



@Override

public void implDemands(String demandName) {

    if(demandName.startsWith(&quot;Add&quot;)){

        System.out.println(&quot;No longer receive &apos;Add&apos; demand&quot;);

        return;

    }

    coder.implDemands(demandName);

}
</code></pre><p>}</p>
<p>这样，当客户再有增加功能的需求时，产品经理就直接回绝了，程序员无需再对这部分需求做过滤。</p>
<p>总结</p>
<p>我们对上面的事例做一个简单的抽象：</p>
<p>代理模式包含如下角色：</p>
<p>Subject:抽象主题角色。可以是接口，也可以是抽象类。</p>
<p>RealSubject:真实主题角色。业务逻辑的具体执行者。</p>
<p>ProxySubject:代理主题角色。内部含有RealSubject的引用,负责对真实角色的调用，并在真实主题角色处理前后做预处理和善后工作。</p>
<p>代理模式优点：</p>
<p>职责清晰 真实角色只需关注业务逻辑的实现，非业务逻辑部分，后期通过代理类完成即可。</p>
<p>高扩展性 不管真实角色如何变化，由于接口是固定的，代理类无需做任何改动。</p>
<p>动态代理</p>
<p>前面讲的主要是静态代理。那么什么是动态代理呢？</p>
<p>假设有这么一个需求，在方法执行前和执行完成后，打印系统时间。这很简单嘛，非业务逻辑，只要在代理类调用真实角色的方法前、后输出时间就可以了。像上例，只有一个implDemands方法，这样实现没有问题。但如果真实角色有10个方法，那么我们要写10遍完全相同的代码。有点追求的码农，肯定会对这种方法感到非常不爽。有些机智的小伙伴可能想到了用AOP解决这个问题。非常正确。莫非AOP和动态代理有什么关系？没错！AOP用的恰恰是动态代理。</p>
<p>代理类在程序运行时创建的代理方式被称为动态代理。也就是说，代理类并不需要在Java代码中定义，而是在运行时动态生成的。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。对于上例打印时间的需求，通过使用动态代理，我们可以做一个“统一指示”，对所有代理类的方法进行统一处理，而不用逐一修改每个方法。下面我们来具体介绍下如何使用动态代理方式实现我们的需求。</p>
<p>与静态代理相比，抽象角色、真实角色都没有变化。变化的只有代理类。因此，抽象角色、真实角色，参考ICoder和JavaCodr。</p>
<p>在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，也叫动态代理类，这个类被要求实现InvocationHandler接口：</p>
<p>public class CoderDynamicProxy implements InvocationHandler{</p>
<pre><code> //被代理的实例

private ICoder coder;



public CoderDynamicProxy(ICoder _coder){

    this.coder = _coder;

}



//调用被代理的方法

@Override

public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

    System.out.println(System.currentTimeMillis());

    Object result = method.invoke(coder, args);

    System.out.println(System.currentTimeMillis());

    return result;

}
</code></pre><p>}</p>
<p>当我们调用代理类对象的方法时，这个“调用”会转送到中介类的invoke方法中，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。</p>
<p>我们通过一个场景类，模拟用户找产品经理更改需求。</p>
<p>public class DynamicClient {</p>
<pre><code>public static void main(String args[]){

       //要代理的真实对象

       ICoder coder = new JavaCoder(&quot;Zhang&quot;);

       //创建中介类实例

       InvocationHandler  handler = new CoderDynamicProxy(coder);

       //获取类加载器

       ClassLoader cl = coder.getClass().getClassLoader();

       //动态产生一个代理类

       ICoder proxy = (ICoder) Proxy.newProxyInstance(cl, coder.getClass().getInterfaces(), handler);

       //通过代理类，执行doSomething方法；

       proxy.implDemands(&quot;Modify user management&quot;);

   }
</code></pre><p>}</p>
<p>执行结果如下：</p>
<p>1501728574978</p>
<p>Zhang implemented demand:Modify user management in JAVA!</p>
<p>1501728574979</p>
<p>通过上述代码，就实现了，在执行委托类的所有方法前、后打印时间。还是那个熟悉的小张，但我们并没有创建代理类，也没有时间ICoder接口。这就是动态代理。</p>
<p>总结</p>
<p>总结一下，一个典型的动态代理可分为以下四个步骤：</p>
<p>创建抽象角色</p>
<p>创建真实角色</p>
<p>通过实现InvocationHandler接口创建中介类</p>
<p>通过场景类，动态生成代理类</p>
<p>如果只是想用动态代理，看到这里就够了。但如果想知道为什么通过proxy对象，就能够执行中介类的invoke方法，以及生成的proxy对象是什么样的，可以继续往下看。</p>
<p>源码分析(JDK7)</p>
<p>看到这里的小伙伴，都是有追求的程序员。上面的场景类中，通过</p>
<p>//动态产生一个代理类</p>
<p>ICoder proxy = (ICoder) Proxy.newProxyInstance(cl, coder.getClass().getInterfaces(), handler);</p>
<p>动态产生了一个代理类。那么这个代理类是如何产生的呢？我们通过代码一窥究竟。</p>
<p>Proxy类的newProxyInstance方法，主要业务逻辑如下：</p>
<p>//生成代理类class，并加载到jvm中</p>
<p>Class&lt;?&gt; cl = getProxyClass0(loader, interfaces);</p>
<p>//获取代理类参数为InvocationHandler的构造函数</p>
<p>final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</p>
<p>//生成代理类，并返回</p>
<p>return newInstance(cons, ih);</p>
<p>上面代码做了三件事：</p>
<p>根据传入的参数interfaces动态生成一个类，它实现interfaces中的接口，该例中即ICoder接口的implDemands方法。假设动态生成的类为$Proxy0。</p>
<p>通过传入的classloder,将刚生成的$Proxy0类加载到jvm中。</p>
<p>利用中介类，调用$Proxy0的$Proxy0(InvocationHandler)构造函数，创建$Proxy0类的实例，其InvocationHandler属性，为我们创建的中介类。</p>
<p>上面的核心，就在于getProxyClass0方法：</p>
<p>private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,</p>
<pre><code>                                       Class&lt;?&gt;... interfaces) {

    if (interfaces.length &gt; 65535) {

        throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);

    }



    // If the proxy class defined by the given loader implementing

    // the given interfaces exists, this will simply return the cached copy;

    // otherwise, it will create the proxy class via the ProxyClassFactory

    return proxyClassCache.get(loader, interfaces);

}
</code></pre><p>在Proxy类中有个属性proxyClassCache，这是一个WeakCache类型的静态变量。它指示了类加载器和代理类之间的映射。所以proxyClassCache的get方法用于根据类加载器来获取Proxy类，如果已经存在则直接从cache中返回，如果没有则创建一个映射并更新cache表。</p>
<p>我们跟一下代理类的创建流程：</p>
<p>调用Factory类的get方法，而它又调用了ProxyClassFactory类的apply方法，最终找到下面一行代码：</p>
<p>//Generate the specified proxy class.</p>
<p>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces);</p>
<p>就是它，生成了代理类。</p>
<p>查看动态生成的代理类</p>
<p>通过上面的分析，我们已经知道Proxy类动态创建代理类的流程。那创建出来的代理类到底是什么样子的呢？我们可以通过下面的代码，手动生成：</p>
<p>public class CodeUtil {</p>
<pre><code>public static void main(String[] args) throws IOException {

     byte[] classFile = ProxyGenerator.generateProxyClass(&quot;TestProxyGen&quot;, JavaCoder.class.getInterfaces());

     File file = new File(&quot;D:/aaa/TestProxyGen.class&quot;);

     FileOutputStream fos = new FileOutputStream(file);

     fos.write(classFile);

     fos.flush();

     fos.close();

   }
</code></pre><p> }</p>
<p>通过反编译工具查看生成的class文件:</p>
<p>import java.lang.reflect.InvocationHandler;</p>
<p>import java.lang.reflect.Method;</p>
<p>import java.lang.reflect.Proxy;</p>
<p>import java.lang.reflect.UndeclaredThrowableException;</p>
<p>import model.proxy.ICoder;</p>
<p>public final class TestProxyGen extends Proxy</p>
<p>  implements ICoder</p>
<p>{</p>
<p>  private static Method m1;</p>
<p>  private static Method m0;</p>
<p>  private static Method m3;</p>
<p>  private static Method m2;</p>
<p>  public TestProxyGen(InvocationHandler paramInvocationHandler)</p>
<pre><code>throws
</code></pre><p>  {</p>
<pre><code>super(paramInvocationHandler);
</code></pre><p>  }</p>
<p>  public final boolean equals(Object paramObject)</p>
<pre><code>throws
</code></pre><p>  {</p>
<pre><code>try

{

  return ((Boolean)this.h.invoke(this, m1, new Object[] { paramObject })).booleanValue();

}

catch (RuntimeException localRuntimeException)

{

  throw localRuntimeException;

}

catch (Throwable localThrowable)

{

}

throw new UndeclaredThrowableException(localThrowable);
</code></pre><p>  }</p>
<p>  public final int hashCode()</p>
<pre><code>throws
</code></pre><p>  {</p>
<pre><code>try

{

  return ((Integer)this.h.invoke(this, m0, null)).intValue();

}

catch (RuntimeException localRuntimeException)

{

  throw localRuntimeException;

}

catch (Throwable localThrowable)

{

}

throw new UndeclaredThrowableException(localThrowable);
</code></pre><p>  }</p>
<p>  public final void implDemands(String paramString)</p>
<pre><code>throws
</code></pre><p>  {</p>
<pre><code>try

{

  this.h.invoke(this, m3, new Object[] { paramString });

  return;

}

catch (RuntimeException localRuntimeException)

{

  throw localRuntimeException;

}

catch (Throwable localThrowable)

{

}

throw new UndeclaredThrowableException(localThrowable);
</code></pre><p>  }</p>
<p>  public final String toString()</p>
<pre><code>throws
</code></pre><p>  {</p>
<pre><code>try

{

  return (String)this.h.invoke(this, m2, null);

}

catch (RuntimeException localRuntimeException)

{

  throw localRuntimeException;

}

catch (Throwable localThrowable)

{

}

throw new UndeclaredThrowableException(localThrowable);
</code></pre><p>  }</p>
<p>  static</p>
<p>  {</p>
<pre><code>try

{

  m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, new Class[] { Class.forName(&quot;java.lang.Object&quot;) });

  m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, new Class[0]);

  m3 = Class.forName(&quot;model.proxy.ICoder&quot;).getMethod(&quot;implDemands&quot;, new Class[] { Class.forName(&quot;java.lang.String&quot;) });

  m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, new Class[0]);

  return;

}

catch (NoSuchMethodException localNoSuchMethodException)

{

  throw new NoSuchMethodError(localNoSuchMethodException.getMessage());

}

catch (ClassNotFoundException localClassNotFoundException)

{

}

throw new NoClassDefFoundError(localClassNotFoundException.getMessage());
</code></pre><p>  }</p>
<p>}</p>
<p>这样，我们就理解，为什么调用代理类的implDemands方法，回去执行中介类的invoke方法了。</p>
<p>看完本文有收获？请转发分享给更多人</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说说 JAVA 代理模式&lt;/p&gt;
&lt;p&gt; 本文内容借阅来自ImportNew中&lt;/p&gt;
&lt;p&gt;事例&lt;/p&gt;
&lt;p&gt;小张是一个普普通通的码农，每天勤勤恳恳地码代码。某天中午小张刚要去吃饭，一个电话打到了他的手机上。“是XX公司的小张吗？我是YY公司的王AA”。“哦，是王总啊，
    
    </summary>
    
      <category term="设计模式" scheme="http://fuyk.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://fuyk.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>聊聊java8时间与日期</title>
    <link href="http://fuyk.github.io/2016/08/22/java8%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/"/>
    <id>http://fuyk.github.io/2016/08/22/java8时间与日期/</id>
    <published>2016-08-22T15:23:45.000Z</published>
    <updated>2017-08-25T15:30:07.192Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家都有这样感觉，Java操作日期和时间的时候，会有一些麻烦。你也许会通过System.currentTimeMillis() 来返回1970年1月1日到今天的毫秒数。或者使用Date类来操作日期；当遇到加减月份、天数的时候 你又需要用到Calendar类；当需要格式化日期的时候需要使用java.text.DateFormat类。所以说在Java中操作日期不是很方便，以至于很多开发者不得不使用第三方库。</p>
<p> <img src="/2016/08/22/java8时间与日期/sj.jpg" alt="时间">  　　　　　　　　　　　　　　　　</p>
<p>JAVA8以的API前存在的问题：</p>
<p>　　　　</p>
<p>线程安全: Date和Calendar不是线程安全的，你需要编写额外的代码处理线程安全问题</p>
<p>API设计和易用性: 由于Date和Calendar的设计不当你无法完成日常的日期操作</p>
<p>ZonedDate和Time: 你必须编写额外的逻辑处理时区和那些旧的逻辑</p>
<p>　　好在JSR 310规范中为Java8添加了新的API， 在java.time包中，新的API纠正了过去的缺陷，</p>
<p>新的日期API</p>
<p>ZoneId: 时区ID，用来确定Instant和LocalDateTime互相转换的规则</p>
<p>Instant: 用来表示时间线上的一个点</p>
<p>LocalDate: 表示没有时区的日期, LocalDate是不可变并且线程安全的</p>
<p>LocalTime: 表示没有时区的时间, LocalTime是不可变并且线程安全的</p>
<p>LocalDateTime: 表示没有时区的日期时间, LocalDateTime是不可变并且线程安全的</p>
<p>Clock: 用于访问当前时刻、日期、时间，用到时区</p>
<p>Duration: 用秒和纳秒表示时间的数量</p>
<p>最常用的就是LocalDate、LocalTime、LocalDateTime了，从它们的名字就可以看出是操作日期 和时间的。这些类是主要用于当时区不需要显式地指定的上下文。在本章节中我们将讨论最常用的api。</p>
<p>LocalDate</p>
<p>LocalDate代表一个IOS格式(yyyy-MM-dd)的日期，可以存储 生日、纪念日等日期。 获取当前的日期：</p>
<p>LocalDate localDate = LocalDate.now();</p>
<p>System.out.println(“localDate: “ + localDate);</p>
<p>localDate: 2017-07-20</p>
<p>LocalDate可以指定特定的日期，调用of或parse方法返回该实例：</p>
<p>LocalDate.of(2017, 07, 20);</p>
<p>LocalDate.parse(“2017-07-20”);</p>
<p>当然它还有一些其他方法，我们一起来看看：</p>
<p>为今天添加一天，也就是获取明天</p>
<p>LocalDate tomorrow = LocalDate.now().plusDays(1);</p>
<p>从今天减去一个月</p>
<p>LocalDate prevMonth = LocalDate.now().minus(1, ChronoUnit.MONTHS);</p>
<p>下面写两个例子，分别解析日期 2017-07-20，获取每周中的星期和每月中的日：</p>
<p>DayOfWeek thursday = LocalDate.parse(“2017-07-20”).getDayOfWeek();</p>
<p>System.out.println(“周四: “ + thursday);</p>
<p>int twenty = LocalDate.parse(“2017-07-20”).getDayOfMonth();</p>
<p>System.out.println(“twenty: “ + twenty);</p>
<p>试试今年是不是闰年:</p>
<p>boolean leapYear = LocalDate.now().isLeapYear();</p>
<p>System.out.println(“是否闰年: “ + leapYear);</p>
<p>判断是否在日期之前或之后:</p>
<p>boolean notBefore = LocalDate.parse(“2017-07-20”)</p>
<pre><code>.isBefore(LocalDate.parse(&quot;2017-07-22&quot;));
</code></pre><p>System.out.println(“notBefore: “ + notBefore);</p>
<p>boolean isAfter = LocalDate.parse(“2017-07-20”).isAfter(LocalDate.parse(“2017-07-22”));</p>
<p>System.out.println(“isAfter: “ + isAfter);</p>
<p>获取这个月的第一天:</p>
<p>LocalDate firstDayOfMonth = LocalDate.parse(“2017-07-20”)</p>
<pre><code>.with(TemporalAdjusters.firstDayOfMonth());
</code></pre><p>System.out.println(“这个月的第一天: “ + firstDayOfMonth);</p>
<p>firstDayOfMonth = firstDayOfMonth.withDayOfMonth(1);</p>
<p>System.out.println(“这个月的第一天: “ + firstDayOfMonth);</p>
<p>判断今天是否是我的生日，例如我的生日是 2009-07-20</p>
<p>LocalDate birthday = LocalDate.of(2009, 07, 20);</p>
<p>MonthDay birthdayMd = MonthDay.of(birthday.getMonth(), birthday.getDayOfMonth());</p>
<p>MonthDay today = MonthDay.from(LocalDate.now());</p>
<p>System.out.println(“今天是否是我的生日: “ + today.equals(birthdayMd));</p>
<p>LocalTime</p>
<p>LocalTime表示一个时间，而不是日期，下面介绍一下它的使用方法。</p>
<p>获取现在的时间，输出15:01:22.144</p>
<p>LocalTime now = LocalTime.now();</p>
<p>System.out.println(“现在的时间: “ + now);</p>
<p>将一个字符串时间解析为LocalTime，输出15:02</p>
<p>LocalTime nowTime = LocalTime.parse(“15:02”);</p>
<p>System.out.println(“时间是: “ + nowTime);</p>
<p>使用静态方法of创建一个时间</p>
<p>LocalTime nowTime = LocalTime.of(15, 02);</p>
<p>System.out.println(“时间是: “ + nowTime);</p>
<p>使用解析字符串的方式并添加一小时，输出16:02</p>
<p>LocalTime nextHour = LocalTime.parse(“15:02”).plus(1, ChronoUnit.HOURS);</p>
<p>System.out.println(“下一个小时: “ + nextHour);</p>
<p>获取时间的小时、分钟</p>
<p>int hour = LocalTime.parse(“15:02”).getHour();</p>
<p>System.out.println(“小时: “ + hour);</p>
<p>int minute = LocalTime.parse(“15:02”).getMinute();</p>
<p>System.out.println(“分钟: “ + minute);</p>
<p>我们也可以通过之前类似的API检查一个时间是否在另一个时间之前、之后</p>
<p>boolean isBefore = LocalTime.parse(“15:02”).isBefore(LocalTime.parse(“16:02”));</p>
<p>boolean isAfter = LocalTime.parse(“15:02”).isAfter(LocalTime.parse(“16:02”));</p>
<p>System.out.println(“isBefore: “ + isBefore);</p>
<p>System.out.println(“isAfter: “ + isAfter);</p>
<p>输出 isBefore: true, isAfter: false。</p>
<p>在LocalTime类中也将每天的开始和结束作为常量供我们使用:</p>
<p>System.out.println(LocalTime.MAX);</p>
<p>System.out.println(LocalTime.MIN);</p>
<p>输出:</p>
<p>23:59:59.999999999</p>
<p>00:00</p>
<p>LocalTime就这些了，下面我们来了解一下LocalDateTime</p>
<p>LocalDateTime</p>
<p>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</p>
<p>获取当前的日期和时间:</p>
<p>LocalDateTime now = LocalDateTime.now();</p>
<p>System.out.println(“现在: “ + now);</p>
<p>输出</p>
<p>现在: 2017-07-20T15:17:19.926</p>
<p>下面使用静态方法和字符串的方式分别创建LocalDateTime对象</p>
<p>LocalDateTime.of(2017, Month.JULY, 20, 15, 18);</p>
<p>LocalDateTime.parse(“2017-07-20T15:18:00”);</p>
<p>``</p>
<p>同时<code>LocalDateTime</code>也提供了相关API来对日期和时间进行增减操作:</p>
<p>```java</p>
<p>LocalDateTime tomorrow = now.plusDays(1);</p>
<p>System.out.println(“明天的这个时间: “ + tomorrow);</p>
<p>LocalDateTime minusTowHour = now.minusHours(2);</p>
<p>System.out.println(“两小时前: “ + minusTowHour);</p>
<p>这个类也提供一系列的get方法来获取特定单位:</p>
<p>Month month = now.getMonth();</p>
<p>System.out.println(“当前月份: “ + month);</p>
<p>日期格式化</p>
<p>在日常开发中我们用到最多的也许就是日期、时间的格式化了，那在Java8种该如何操作呢？</p>
<p>LocalDateTime now = LocalDateTime.now();</p>
<p>DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(“yyyy-MM-dd HH:mm:ss”);</p>
<p>System.out.println(“默认格式化: “ + now);</p>
<p>System.out.println(“自定义格式化: “ + now.format(dateTimeFormatter));</p>
<p>LocalDateTime localDateTime = LocalDateTime.parse(“2017-07-20 15:27:44”, dateTimeFormatter);</p>
<p>System.out.println(“字符串转LocalDateTime: “ + localDateTime);</p>
<p>也可以使用DateTimeFormatter的format方法将日期、时间格式化为字符串</p>
<p>DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(“yyyy-MM-dd”);</p>
<p>String dateString = dateTimeFormatter.format(LocalDate.now());</p>
<p>System.out.println(“日期转字符串: “ + dateString);</p>
<p>日期周期</p>
<p>Period类用于修改给定日期或获得的两个日期之间的区别。</p>
<p>给初始化的日期添加5天:</p>
<p>LocalDate initialDate = LocalDate.parse(“2017-07-20”);</p>
<p>LocalDate finalDate = initialDate.plus(Period.ofDays(5));</p>
<p>System.out.println(“初始化日期: “ + initialDate);</p>
<p>System.out.println(“加日期之后: “ + finalDate);</p>
<p>周期API中提供给我们可以比较两个日期的差别，像下面这样获取差距天数:</p>
<p>long between = ChronoUnit.DAYS.between(initialDate, finalDate);</p>
<p>System.out.println(“差距天数: “ + between);</p>
<p>上面的代码会返回5，当然你想获取两个日期相差多少小时也是简单的。</p>
<p>与遗留代码转换</p>
<p>在之前的代码中你可能出现了大量的Date类，如何将它转换为Java8种的时间类呢？</p>
<p>Date和Instant互相转换</p>
<p>Date date = Date.from(Instant.now());</p>
<p>Instant instant = date.toInstant();</p>
<p>Date转换为LocalDateTime</p>
<p>LocalDateTime localDateTime = LocalDateTime.from(new Date());</p>
<p>System.out.println(localDateTime);</p>
<p>LocalDateTime转Date</p>
<p>Date date =</p>
<p>Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());</p>
<p>LocalDate转Date</p>
<p>Date date =</p>
<p>Date.from(LocalDate.now().atStartOfDay().atZone(ZoneId.systemDefault()).toInstant</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大家都有这样感觉，Java操作日期和时间的时候，会有一些麻烦。你也许会通过System.currentTimeMillis() 来返回1970年1月1日到今天的毫秒数。或者使用Date类来操作日期；当遇到加减月份、天数的时候 你又需要用到Calendar类；当需要格式化
    
    </summary>
    
      <category term="基础" scheme="http://fuyk.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://fuyk.github.io/tags/java/"/>
    
  </entry>
  
</feed>
